import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import joblib
import re

st.set_page_config(page_icon='üè¶')

df = pd.read_csv("data.csv")
data = df.drop(columns=['ID_–æ–±—ä–µ–∫—Ç–∞'])

model = joblib.load('model.pickle')
scaler = joblib.load('scaler.pickle')
ordinal_encoder = joblib.load('encoder.pickle')

img = Image.open("bank_image.jpg")

st.title("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞")
st.image(img)
st.header("–†–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç–∫–ª–∏–∫–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–∞–Ω–∫–∞")
st.subheader("–í —ç—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º—ã –∏—Å—Å–ª–µ–¥—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –±–∞–Ω–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞–ª–∏ –∏–ª–∏ –Ω–µ –¥–µ–ª–∞–ª–∏ –æ—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–∞–Ω–∫–∞. –î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:")
st.write(df.columns.tolist())

st.write("–í–æ—Ç –ø–µ—Ä–≤—ã–µ –ø—è—Ç—å —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:")
st.write(df.head())
st.markdown("---")
st.write("–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")

plt.figure(figsize=(10, 5))
palette = sns.color_palette("viridis", as_cmap=True)
sns.histplot(data=data, x='–í–æ–∑—Ä–∞—Å—Ç', bins=40, color=palette(0.6), kde=True)

mean_age = data['–í–æ–∑—Ä–∞—Å—Ç'].mean()
plt.axvline(mean_age, color='darkslateblue', linestyle='--')
plt.title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É')
st.pyplot(plt)
st.write("–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ - 40 –ª–µ—Ç.")
st.markdown("---")
st.write("–û—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.")

df['–¶–µ–ª–µ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'] = df['–¶–µ–ª–µ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'].replace({0: '–ù–µ –±—ã–ª–æ –æ—Ç–∫–ª–∏–∫–∞', 1: '–ë—ã–ª –æ—Ç–∫–ª–∏–∫'})
plt.figure(figsize=(10, 5))
sns.countplot(data=df, x='–¶–µ–ª–µ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', palette='viridis')
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π')
st.pyplot(plt)
st.write("–°—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: –∏–∑ 15 —Ç—ã—Å—è—á –æ–±—ä–µ–∫—Ç–æ–≤ - 13 —Ç—ã—Å—è—á –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞, –∏ —Ç–æ–ª—å–∫–æ —á—É—Ç—å –º–µ–Ω–µ–µ –¥–≤—É—Ö —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫ —Å–¥–µ–ª–∞–ª–∏ –æ—Ç–∫–ª–∏–∫ –Ω–∞ —É—Å–ª—É–≥—É –±–∞–Ω–∫–∞. –¢–∞–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–≤–ª–∏—è–µ—Ç –∏ –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å.")
st.markdown("---")

df['–ü–æ–ª'] = data['–ü–æ–ª'].replace({0: '–ñ–µ–Ω—â–∏–Ω–∞', 1: '–ú—É–∂—á–∏–Ω–∞'})
df['–°—Ç–∞—Ç—É—Å_—Ä–∞–±–æ—Ç–Ω–∏–∫–∞'] = data['–°—Ç–∞—Ç—É—Å_—Ä–∞–±–æ—Ç–Ω–∏–∫–∞'].replace({0: '–ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π', 1: '–†–∞–±–æ—Ç–∞—é—â–∏–π'})
df['–°—Ç–∞—Ç—É—Å_–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞'] = data['–°—Ç–∞—Ç—É—Å_–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞'].replace({0: '–ù–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–º', 1: '–Ø–≤–ª—è–µ—Ç—Å—è –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–º'})
df['–ù–∞–ª–∏—á–∏–µ_–∫–≤–∞—Ä—Ç–∏—Ä—ã'] = data['–ù–∞–ª–∏—á–∏–µ_–∫–≤–∞—Ä—Ç–∏—Ä—ã'].replace(
    {0: '–ù–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã', 1: '–ï—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–∞'})

st.write("–ë–µ–≥–ª–æ –≤–∑–≥–ª—è–Ω–µ–º –∏ –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
columns = ['–ü–æ–ª', '–°–µ–º–µ–π–Ω—ã–π_—Å—Ç–∞—Ç—É—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤',
   '–°—Ç–∞—Ç—É—Å_—Ä–∞–±–æ—Ç–Ω–∏–∫–∞', '–°—Ç–∞—Ç—É—Å_–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞', '–ù–∞–ª–∏—á–∏–µ_–∫–≤–∞—Ä—Ç–∏—Ä—ã',
   '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π_–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–°—Å—É–¥—ã_–∫–ª–∏–µ–Ω—Ç–∞', '–ü–æ–≥–∞—à–µ–Ω–Ω—ã–µ_—Å—Å—É–¥—ã',
   '–°–µ–º–µ–π–Ω—ã–π_–¥–æ—Ö–æ–¥']

plt.figure(figsize=(10, len(columns) * 5))

for i, column in enumerate(columns):
    plt.subplot(len(columns), 1, i + 1)
    sns.countplot(data=df, x=column, palette='viridis')
    plt.title(f'{column}')

plt.tight_layout()
st.pyplot(plt)

st.markdown("---")
st.write("–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")

numeric_df = data.select_dtypes(include=[np.number])
corr_matrix = numeric_df.corr()

plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤', fontsize=20, pad=20)
st.pyplot(plt.gcf())
st.write("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –æ—Ç—Ä–∞–∂–∞–µ—Ç –æ–¥–Ω—É –≤–∞–∂–Ω—É—é –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å - —Å—Ä–µ–¥–∏ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–∏ –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π. –ù–∞–∏–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º –∏ –¥–æ—Ö–æ–¥–æ–º, –Ω–æ –∏ –æ–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π.")
st.write("–í–∑–≥–ª—è–Ω–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤:")

description = data.describe()
st.table(description.drop('count'))

st.write("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –∏—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–µ–µ.")

plt.figure(figsize=(10, 5))
sns.boxplot(data=data, x='–¶–µ–ª–µ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', y="–í–æ–∑—Ä–∞—Å—Ç", palette='viridis')
plt.title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞ "–í–æ–∑—Ä–∞—Å—Ç" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π')
st.pyplot(plt)
st.write("–ú–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ, —á–µ–º —É —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–∞–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç.")

contingency_table = pd.crosstab(data['–ü–æ–≥–∞—à–µ–Ω–Ω—ã–µ_—Å—Å—É–¥—ã'], data['–¶–µ–ª–µ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'])
percentage_distribution = contingency_table.apply(lambda x: x / x.sum() * 100, axis=1)
plt.figure(figsize=(10, 4))
sns.heatmap(percentage_distribution, annot=True, cmap='BuGn', fmt=".2f")
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–æ–≥–∞—à–µ–Ω–Ω—ã–º–∏ —Å—Å—É–¥–∞–º–∏ –∏ –æ—Ç–∫–ª–∏–∫–æ–º (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)', fontsize=15, pad=20)
st.pyplot(plt.gcf())

st.write("–°—Ç–æ–∏—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –≤—ã–±—Ä–æ—Å –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–∏ 8, –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–µ–µ –≤–∑–≥–ª—è–Ω—É–≤ –Ω–∞ –ª—é–¥–µ–π –±–µ–∑ –ø–æ–≥–∞—à–µ–Ω–Ω—ã—Ö —Å—Å—É–¥, –æ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞—é—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–∞–Ω–∫–∞ –Ω–µ–º–Ω–æ–≥–æ —á–∞—â–µ –¥—Ä—É–≥–∏—Ö.")

bins = [0, 10000, 30000, 50000, 100000, 250000]
labels = ["–¥–æ 10000 —Ä—É–±.", "–æ—Ç 10000 –¥–æ 30000 —Ä—É–±.", "–æ—Ç 30000 –¥–æ 50000 —Ä—É–±.", "–æ—Ç 50000 –¥–æ 100000 —Ä—É–±.",
          "–æ—Ç 100000 –¥–æ 250000 —Ä—É–±."]

data['–î–æ—Ö–æ–¥'] = pd.cut(data['–õ–∏—á–Ω—ã–π_–¥–æ—Ö–æ–¥'], bins=bins, labels=labels, include_lowest=True)

contingency_table = pd.crosstab(data['–î–æ—Ö–æ–¥'], data['–¶–µ–ª–µ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'])
percentage_distribution = contingency_table.apply(lambda x: x / x.sum() * 100, axis=1)
plt.figure(figsize=(10, 4))
sns.heatmap(percentage_distribution, annot=True, cmap='BuGn', fmt=".2f")
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–æ—Ö–æ–¥–æ–º –∏ –æ—Ç–∫–ª–∏–∫–æ–º (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)', fontsize=15, pad=20)
st.pyplot(plt.gcf())

plt.figure(figsize=(10, 4))
sns.countplot(data=data, x="–î–æ—Ö–æ–¥", palette='viridis')
plt.title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞')
plt.tight_layout()
st.pyplot(plt)

st.write("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –∏ –µ–≥–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ —Å –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ–º –¥–æ—Ö–æ–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∏ –æ—Ç–∫–ª–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞.")

st.markdown("---")
st.write("–û—Ü–µ–Ω–∏–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –æ—Ç–∫–ª–∏–∫–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ —Å–µ–º–µ–π–Ω—ã–π –¥–æ—Ö–æ–¥, —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ —Å–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")
st.write("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.")

# –ø–æ—Ä—è–¥–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≤ "–°–µ–º–µ–π–Ω–æ–º –¥–æ—Ö–æ–¥–µ" –ø–æ—á–µ–º—É-—Ç–æ –ø–µ—Ä–µ–º–µ—à–∞–Ω, –Ω–∞–¥–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
income_order = ['—Å–≤—ã—à–µ 50000 —Ä—É–±.', '–æ—Ç 20000 –¥–æ 50000 —Ä—É–±.', '–æ—Ç 10000 –¥–æ 20000 —Ä—É–±.', '–æ—Ç 5000 –¥–æ 10000 —Ä—É–±.', '–¥–æ 5000 —Ä—É–±.']
data['–°–µ–º–µ–π–Ω—ã–π_–¥–æ—Ö–æ–¥'] = pd.Categorical(data['–°–µ–º–µ–π–Ω—ã–π_–¥–æ—Ö–æ–¥'], categories=income_order, ordered=True)

contingency_table = pd.crosstab(data['–°–µ–º–µ–π–Ω—ã–π_–¥–æ—Ö–æ–¥'], data['–¶–µ–ª–µ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'])
percentage_distribution = contingency_table.apply(lambda x: x / x.sum() * 100, axis=1)
plt.figure(figsize=(10, 4))
sns.heatmap(percentage_distribution, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)', fontsize=15, pad=20)
st.pyplot(plt.gcf())

st.write("–°–µ–º–µ–π–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∑–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω—É—é —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é - –æ—Ç–∫–ª–∏–∫ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π —Å —Å–µ–º–µ–π–Ω—ã–º –¥–æ—Ö–æ–¥ —Å–≤—ã—à–µ 50000 —Ä—É–±–ª–µ–π.")

income_order = ['–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å', '–î–≤–∞ –∏ –±–æ–ª–µ–µ –≤—ã—Å—à–∏—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è', '–í—ã—Å—à–µ–µ', '–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ', '–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ', '–°—Ä–µ–¥–Ω–µ–µ', '–ù–µ–ø–æ–ª–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ']
data['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'] = pd.Categorical(data['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'], categories=income_order, ordered=True)
contingency_table = pd.crosstab(data['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'], data['–¶–µ–ª–µ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'])
percentage_distribution = contingency_table.apply(lambda x: x / x.sum() * 100, axis=1)
plt.figure(figsize=(10, 5))
sns.heatmap(percentage_distribution, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)', fontsize=15, pad=20)
st.pyplot(plt.gcf())

st.write("–ü—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –º–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –æ–∫–æ–ª–æ 20% –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª—é–¥–µ–π —Å –¥–≤—É–º—è –∏ –±–æ–ª–µ–µ –≤—ã—Å—à–∏–º–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏ –∏ —Å –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω—ã–º –≤—ã—Å—à–∏–º –æ—Ç–∫–ª–∏–∫–∞—é—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞.")

contingency_table = pd.crosstab(data['–î–æ–ª–∂–Ω–æ—Å—Ç—å'], data['–¶–µ–ª–µ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'])
percentage_distribution = contingency_table.apply(lambda x: x / x.sum() * 100, axis=1)
plt.figure(figsize=(10, 6))
sns.heatmap(percentage_distribution, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)', fontsize=15, pad=20)
st.pyplot(plt.gcf())
st.write("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º, –º–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–∏–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ —Ç–æ–≤–∞—Ä –±–∞–Ω–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —Ñ–∏—Ä–º–µ), –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è, –∞ —Ç–∞–∫–∂–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –≤—ã—Å—à–µ–≥–æ –∏ –Ω–∏–∑—à–µ–≥–æ –∑–≤–µ–Ω–∞.")

st.write("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ –≥—Ä–∞–∂–¥–∞–Ω–∞–º–∏ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã –ø–æ—á—Ç–∏ –Ω–µ –æ—Ç–∫–ª–∏–∫–∞—é—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–∞–Ω–∫–∞.")

contingency_table = pd.crosstab(data['–°–µ–º–µ–π–Ω—ã–π_—Å—Ç–∞—Ç—É—Å'], data['–¶–µ–ª–µ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'])
percentage_distribution = contingency_table.apply(lambda x: x / x.sum() * 100, axis=1)
plt.figure(figsize=(10, 4))
sns.heatmap(percentage_distribution, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)', fontsize=15, pad=20)
st.pyplot(plt.gcf())

st.write("–ù–∞–∏–±–æ–ª—å—à–∏–π –æ—Ç–∫–ª–∏–∫ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π, —Å–æ—Å—Ç–æ—è—â–∏—Ö –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ.")

st.markdown("---")

st.write("–ü–æ—Å–∫–æ–ª—å–∫—É —Ç–µ–ø–ª–æ–≤–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫–∞–∑–∞–ª–∞—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π, —Å—Ç–æ–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞.")
contingency_table = pd.crosstab(data['–û—Ç—Ä–∞—Å–ª—å_—Ä–∞–±–æ—Ç—ã'], data['–¶–µ–ª–µ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'])
percentage_distribution = contingency_table.apply(lambda x: x / x.sum() * 100, axis=1)
plt.figure(figsize=(10, 20))
sns.heatmap(percentage_distribution, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏ —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)', fontsize=15, pad=20)
st.pyplot(plt.gcf())
st.write("–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É –æ—Ç—Ä–∞—Å–ª—è–º–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–∫–ª–∏–∫–æ–º –Ω–∞ —É—Å–ª—É–≥–∏ –±–∞–Ω–∫–∞, –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å —Å—Ñ–µ—Ä—É –Ω–µ–¥–≤–∏–∂–µ–º–æ—Å—Ç–∏ - 35% –ª—é–¥–µ–π, –∑–∞–Ω—è—Ç—ã—Ö –≤ —Å—Ñ–µ—Ä–µ –Ω–µ–¥–≤–∏–∂–µ–º–æ—Å—Ç–∏, –¥–µ–ª–∞—é—Ç –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ —É—Å–ª—É–≥–∏ –±–∞–Ω–∫–∞. –°–ª–µ–¥—É—é—â–∏–π —Å–µ–∫—Ç–æ—Ä - —ç—Ç–æ —Å—Ñ–µ—Ä–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å.")

contingency_table = pd.crosstab(data['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'], data['–¶–µ–ª–µ–≤–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è'])
percentage_distribution = contingency_table.apply(lambda x: x / x.sum() * 100, axis=1)
plt.figure(figsize=(10, 10))
sns.heatmap(percentage_distribution, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)', fontsize=15, pad=20)
st.pyplot(plt.gcf())
st.write("–ù–æ –µ—Å–ª–∏ –º—ã —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∞ –Ω–µ –Ω–∞ —Å—Ñ–µ—Ä—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏, —Ç–æ –ª–∏–¥–∏—Ä—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ –æ—Ç–∫–ª–∏–∫–∞–º –∑–∞–Ω–∏–º–∞—é—Ç –ª—é–¥–∏, –∑–∞–Ω–∏–º–∞—é—â–∏–µ—Å—è —Ä–µ–∫–ª–∞–º–æ–π –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º. –ó–¥–µ—Å—å —Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–∞ –ø—Ä–æ—à–ª–æ–º –≥—Ä–∞—Ñ–∏–∫–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –±—ã–ª —Å –Ω—É–ª–µ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ - –∑–¥–µ—Å—å –≤–∞–∂–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å –æ—Ç—Ä–∞—Å–ª–∏ –æ—Ç —Å–∞–º–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞. –ü–æ–¥—Ä–∞–∑—É–º–∞–µ—Ç—Å—è, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–º, –Ω–æ –≤ —Å—Ñ–µ—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –∞ –Ω–µ –≤ —Ä–µ–∫–ª–∞–º–Ω–æ–π —Ñ–∏—Ä–º–µ.")
st.markdown("---")
st.subheader("–í—ã–≤–æ–¥")
st.write("–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–Ω–∞—á–µ–Ω–∏–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤–µ–¥–µ—Ç –∫ —Å–Ω–∏–∂–µ–Ω–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏ —ç—Ç–æ–º –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –≤–ø–æ–ª–Ω–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏.")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.title("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –æ—Ç–∫–ª–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞")

gender = st.sidebar.selectbox("–ü–æ–ª", ['–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞'])
age = st.sidebar.slider("–í–æ–∑—Ä–∞—Å—Ç", 0, 100, 30)
education = st.sidebar.selectbox("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", ['–ù–µ–ø–æ–ª–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ', '–°—Ä–µ–¥–Ω–µ–µ', '–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ', '–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ', '–í—ã—Å—à–µ–µ', '–î–≤–∞ –∏ –±–æ–ª–µ–µ –≤—ã—Å—à–∏—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è', '–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å'])
marital_status = st.sidebar.selectbox("–°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å", ['–°–æ—Å—Ç–æ—é –≤ –±—Ä–∞–∫–µ', '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –±—Ä–∞–∫', '–†–∞–∑–≤–µ–¥–µ–Ω(–∞)', '–ù–µ —Å–æ—Å—Ç–æ—è–ª –≤ –±—Ä–∞–∫–µ', '–í–¥–æ–≤–µ—Ü/–í–¥–æ–≤–∞'])
child_total = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π", 0, 10)
dependants = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤", 0, 10)
socstatus_work_fl = st.sidebar.selectbox("–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", ['–†–∞–±–æ—Ç–∞–µ—Ç', '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'])
socstatus_pens_fl = st.sidebar.selectbox("–°—Ç–∞—Ç—É—Å –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞", ['–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä', '–ù–µ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä'])
fl_presence_fl = st.sidebar.selectbox("–ù–∞–ª–∏—á–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã", ['–ï—Å—Ç—å', '–ù–µ—Ç'])
own_auto = st.sidebar.slider("–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", 0, 2)
loan_num_total = st.sidebar.slider("–°—Å—É–¥—ã –∫–ª–∏–µ–Ω—Ç–∞", 0, 15)
loan_num_closed = st.sidebar.slider("–ü–æ–≥–∞—à–µ–Ω–Ω—ã–µ —Å—Å—É–¥—ã", 0, 15)
family_income = st.sidebar.selectbox("–°–µ–º–µ–π–Ω—ã–π –¥–æ—Ö–æ–¥", ['–¥–æ 5000 —Ä—É–±.', '–æ—Ç 5000 –¥–æ 10000 —Ä—É–±.', '–æ—Ç 10000 –¥–æ 20000 —Ä—É–±.', '–æ—Ç 20000 –¥–æ 50000 —Ä—É–±.', '—Å–≤—ã—à–µ 50000 —Ä—É–±.'])
personal_income = st.sidebar.number_input("–õ–∏—á–Ω—ã–π –¥–æ—Ö–æ–¥", min_value=0)
gen_industry = st.sidebar.selectbox("–û—Ç—Ä–∞—Å–ª—å —Ä–∞–±–æ—Ç—ã", ['–¢–æ—Ä–≥–æ–≤–ª—è', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞', '–î—Ä—É–≥–∏–µ —Å—Ñ–µ—Ä—ã', '–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ', '–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è/–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å/–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–ö–æ–º–º—É–Ω–∞–ª—å–Ω–æ–µ —Ö–æ–∑-–≤–æ/–î–æ—Ä–æ–∂–Ω—ã–µ —Å–ª—É–∂–±—ã', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
       '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ë–∞–Ω–∫/–§–∏–Ω–∞–Ω—Å—ã', '–†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å/–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å', '–°–ú–ò/–†–µ–∫–ª–∞–º–∞/PR-–∞–≥–µ–Ω—Å—Ç–≤–∞',
       '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞', '–°–∞–ª–æ–Ω—ã –∫—Ä–∞—Å–æ—Ç—ã –∏ –∑–¥–æ—Ä–æ–≤—å—è', '–ß–û–ü/–î–µ—Ç–µ–∫—Ç–∏–≤–Ω–∞—è –¥-—Ç—å','–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è/–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–ù–∞—É–∫–∞', '–•–∏–º–∏—è/–ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è/–§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞',
       '–°–±–æ—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '–¢—É—Ä–∏–∑–º', '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏/–Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ü–æ–¥–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∞', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏', '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',  '–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '–õ–æ–≥–∏—Å—Ç–∏–∫–∞', '–ù–∞ –ø–µ–Ω—Å–∏–∏', '–î—Ä—É–≥–∏–µ —Å—Ñ–µ—Ä—ã'])
gen_title = st.sidebar.selectbox("–î–æ–ª–∂–Ω–æ—Å—Ç—å", ['–†–∞–±–æ—á–∏–π', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–≤–µ–Ω–∞',  '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤—ã—Å—à–µ–≥–æ –∑–≤–µ–Ω–∞', '–°–ª—É–∂–∞—â–∏–π', '–†–∞–±–æ—Ç–Ω–∏–∫ —Å—Ñ–µ—Ä—ã —É—Å–ª—É–≥', '–í—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü. —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', '–í–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–∏–∑—à–µ–≥–æ –∑–≤–µ–Ω–∞',
       '–î—Ä—É–≥–æ–µ', '–ü–∞—Ä—Ç–Ω–µ—Ä', '–ù–∞ –ø–µ–Ω—Å–∏–∏', '–î—Ä—É–≥–æ–µ'])
job_dir = st.sidebar.selectbox("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", ['–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Ö–ø–µ—Ä—Å–æ–Ω–∞–ª', '–£—á–∞—Å—Ç–∏–µ –≤ –æ—Å–Ω–æ–≤. –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', '–ê–¥–º-—Ö–æ–∑. –∏ —Ç—Ä–∞–Ω—Å–ø. —Å–ª—É–∂–±—ã', '–ü—Ä-—Ç–µ—Ö–Ω. –æ–±–µ—Å–ø. –∏ —Ç–µ–ª–µ–∫–æ–º.',
       '–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '–ù–∞ –ø–µ–Ω—Å–∏–∏', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è, —Ñ–∏–Ω–∞–Ω—Å—ã, –ø–ª–∞–Ω–∏—Ä.', '–°–Ω–∞–±–∂–µ–Ω–∏–µ –∏ —Å–±—ã—Ç', '–ö–∞–¥—Ä–æ–≤–∞—è —Å–ª—É–∂–±–∞ –∏ —Å–µ–∫—Ä–µ—Ç–∞—Ä–∏–∞—Ç', '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞',
       '–†–µ–∫–ª–∞–º–∞ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥'])
work_time = st.sidebar.number_input("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ (–≤ –º–µ—Å—è—Ü–∞—Ö)", min_value=0)

button = st.sidebar.button('–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!')

if button:

    input_values = [age, gender, education, marital_status, child_total, dependants, socstatus_work_fl, socstatus_pens_fl, fl_presence_fl, own_auto, loan_num_total, loan_num_closed, family_income, personal_income, gen_industry, gen_title, job_dir, work_time]
    columns = ['AGE', 'GENDER', 'EDUCATION', 'MARITAL_STATUS', 'CHILD_TOTAL', 'DEPENDANTS', 'SOCSTATUS_WORK_FL', 'SOCSTATUS_PENS_FL', 'FL_PRESENCE_FL', 'OWN_AUTO', 'LOAN_NUM_TOTAL', 'LOAN_NUM_CLOSED', 'FAMILY_INCOME', 'PERSONAL_INCOME', 'GEN_INDUSTRY', 'GEN_TITLE', 'JOB_DIR', 'WORK_TIME']
    input_df = pd.DataFrame([input_values], columns=columns)

    input_df['GENDER'] = input_df['GENDER'].replace({'–ñ–µ–Ω—â–∏–Ω–∞': 0, '–ú—É–∂—á–∏–Ω–∞': 1})
    input_df['SOCSTATUS_WORK_FL'] = input_df['SOCSTATUS_WORK_FL'].replace({'–†–∞–±–æ—Ç–∞–µ—Ç': 1, '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç': 0})
    input_df['SOCSTATUS_PENS_FL'] = input_df['SOCSTATUS_PENS_FL'].replace({'–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä': 1, '–ù–µ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä': 0})
    input_df['FL_PRESENCE_FL'] = input_df['FL_PRESENCE_FL'].replace({'–ï—Å—Ç—å': 1, '–ù–µ—Ç': 0})

    def replace_values(x):
        if "–æ—Ç" in x and "–¥–æ" in x:
            numbers = [int(n) for n in re.findall(r"\d+", x)]
            return sum(numbers) / len(numbers)
        else:
            number = re.search(r"\d+", x).group()
            return int(number)


    input_df['FAMILY_INCOME'] = input_df['FAMILY_INCOME'].apply(replace_values)

    bins = [0, 10000, 30000, 50000, 100000, 250000]
    labels = ["–¥–æ 10000 —Ä—É–±.", "–æ—Ç 10000 –¥–æ 30000 —Ä—É–±.", "–æ—Ç 30000 –¥–æ 50000 —Ä—É–±.", "–æ—Ç 50000 –¥–æ 100000 —Ä—É–±.",
              "–æ—Ç 100000 –¥–æ 250000 —Ä—É–±."]

    input_df['INCOME'] = pd.cut(input_df['PERSONAL_INCOME'], bins=bins, labels=labels, include_lowest=True)
    input_df = ordinal_encoder.transform(input_df)

    input_df = scaler.transform(input_df)

    probs_test = model.predict_proba(input_df)
    prediction = probs_test[:, 1] >= 0.5

    response = "–û—Ç–∫–ª–∏–∫!" if prediction else "–û—Ç–∫–ª–∏–∫–∞ –Ω–µ—Ç."

    st.sidebar.write(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {response}')

    response = "–û—Ç–∫–ª–∏–∫!" if prediction else "–û—Ç–∫–ª–∏–∫–∞ –Ω–µ—Ç."

    st.sidebar.write(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {response}')
